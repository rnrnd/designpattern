package designprinciple.dependencyinversion;

/**
 * 1.高层模块不应该依赖低层模块，二者都应该依赖其抽象<br/>
 * 2.抽象不应该依赖细节，细节应该依赖抽象<br/>
 * 3.依赖倒置的中心思想是面向接口编程<br/>
 * 4.依赖倒置基于的设计理念：相较于细节的多变性，抽象要稳定得多，以抽象为基础搭建的架构要比以细节为基础搭建的架构稳定得多<br/>
 * 5.使用接口或者抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给实现类
 */
public class DependencyInversion {
    /**
     * 1.低层模块尽量要有抽象类或接口，或者二者都有，这样程序稳定性更高
     * 2.变量的声明类型尽量是接口或者抽象类，这样我们的变量引用和实际对象之间存在缓冲，利于程序的扩展和优化
     * 3.继承时遵循里氏替换原则
     */
}
